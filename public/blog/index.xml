<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on &gt; Hasith De Alwis</title>
    <link>http://localhost:1313/blog/</link>
    <description>Recent content in Blog on &gt; Hasith De Alwis</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 Aug 2025 18:42:37 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building in Public: My Hugo Portfolio</title>
      <link>http://localhost:1313/blog/first-post/</link>
      <pubDate>Sat, 09 Aug 2025 18:42:37 -0400</pubDate>
      <guid>http://localhost:1313/blog/first-post/</guid>
      <description>&lt;p&gt;Welcome to my first blog post! I decided to build my portfolio site using Hugo and document the process.&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-hugo&#34;&gt;Why Hugo?&lt;/h2&gt;&#xA;&lt;p&gt;After exploring various static site generators, I chose Hugo for several reasons:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Speed&lt;/strong&gt; - Hugo builds sites incredibly fast&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Flexibility&lt;/strong&gt; - Complete control over layouts and styling&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Markdown&lt;/strong&gt; - Write content in markdown with frontmatter&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;No dependencies&lt;/strong&gt; - Single binary, no complex toolchain&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;the-emacs-gnu-aesthetic&#34;&gt;The Emacs GNU Aesthetic&lt;/h2&gt;&#xA;&lt;p&gt;I wanted my site to have that classic Emacs/GNU terminal vibe - clean, functional, and reminiscent of the tools I use daily for coding. The dark header, monospace fonts, and terminal-inspired color scheme create that perfect developer aesthetic.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Scaling Video Diffusion Models to 100M&#43; Users</title>
      <link>http://localhost:1313/blog/scaling-video-diffusion/</link>
      <pubDate>Fri, 08 Aug 2025 10:30:00 -0400</pubDate>
      <guid>http://localhost:1313/blog/scaling-video-diffusion/</guid>
      <description>&lt;p&gt;At WOMBO, I had the incredible opportunity to work on scaling one of the first commercially successful video diffusion models. Here&amp;rsquo;s what I learned about building AI systems that can handle massive scale.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-challenge&#34;&gt;The Challenge&lt;/h2&gt;&#xA;&lt;p&gt;When we launched our video generation feature, we had no idea it would reach 100+ million users in just 2 months. The initial prototype was built for research, not production scale.&lt;/p&gt;&#xA;&lt;h2 id=&#34;performance-optimizations&#34;&gt;Performance Optimizations&lt;/h2&gt;&#xA;&lt;p&gt;The key breakthroughs came from:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Building High-Performance Systems: Lessons from CentML</title>
      <link>http://localhost:1313/blog/high-performance-systems/</link>
      <pubDate>Thu, 07 Aug 2025 14:15:00 -0400</pubDate>
      <guid>http://localhost:1313/blog/high-performance-systems/</guid>
      <description>&lt;p&gt;Working as a Software Engineering Intern at CentML has given me deep insights into what it takes to build truly high-performance machine learning infrastructure.&lt;/p&gt;&#xA;&lt;h2 id=&#34;performance-first-mindset&#34;&gt;Performance-First Mindset&lt;/h2&gt;&#xA;&lt;p&gt;At CentML, every decision is made with performance in mind. This isn&amp;rsquo;t just about making things fast - it&amp;rsquo;s about understanding the fundamental trade-offs in distributed systems and making conscious choices.&lt;/p&gt;&#xA;&lt;h2 id=&#34;key-principles&#34;&gt;Key Principles&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Memory Efficiency&lt;/strong&gt;: Every byte matters when you&amp;rsquo;re working with large models. We spend significant time profiling memory usage and optimizing allocation patterns.&lt;/p&gt;</description>
    </item>
    <item>
      <title>FE best practices</title>
      <link>http://localhost:1313/blog/fe-best-practices/</link>
      <pubDate>Sat, 28 Dec 2024 10:30:00 -0400</pubDate>
      <guid>http://localhost:1313/blog/fe-best-practices/</guid>
      <description>&lt;p&gt;&lt;strong&gt;DISCLAIMER:&lt;/strong&gt; As predicted, I disagree with a lot of what I wrote here earlier ðŸ˜…. With that being said, I still want to keep it up since there is still some useful information, and it&amp;rsquo;s always fun to see how far you&amp;rsquo;ve come.&lt;/p&gt;&#xA;&lt;p&gt;Scalable front-end code is an expansive topic; of course, there are topics I can&amp;rsquo;t cover here, such as effective testing, development philosophies, monorepos, and much more. This article focuses on practical strategies for scaling front-end code in terms of architecture, maintainability, and technologies. My primary goal is to leave you with an idea of WHAT you should be researching and looking into, not necessarily explaining the nitty-gritty of all topics. This guide is meant to be framework agnostic, and my advice here should be transferable to any framework.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
