<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hasith De Alwis on &gt; Hasith De Alwis</title>
    <link>http://localhost:1313/</link>
    <description>Recent content in Hasith De Alwis on &gt; Hasith De Alwis</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 25 Aug 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Syncgen</title>
      <link>http://localhost:1313/projects/syncgen/</link>
      <pubDate>Mon, 25 Aug 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/syncgen/</guid>
      <description>&lt;h1 id=&#34;what&#34;&gt;What&lt;/h1&gt;&#xA;&lt;p&gt;ha-syncgen is a declarative infrastructure tool designed to simplify the setup of high-availability PostgreSQL database clusters. The project takes a YAML-based configuration approach where users define their primary database server and replica nodes along with synchronization parameters, and the tool automatically generates all the necessary scripts, systemd services, and configuration files needed to maintain the cluster. The tool uses rsync for data synchronization between the primary and replica nodes, with configurable sync intervals and automatic health monitoring.&#xA;The generated infrastructure includes individual sync scripts for each replica, health check scripts that monitor the primary server&amp;rsquo;s availability, systemd service and timer units for automated operation, and PostgreSQL configuration patches.&#xA;The backbone of this project is WAL streaming, which is already built-in to PostgreSQL, allowing us to be certain that the data sent over is not corrupted, which could be the case if we use something like &lt;code&gt;rsync&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Building in Public: My Hugo Portfolio</title>
      <link>http://localhost:1313/posts/first-post/</link>
      <pubDate>Sat, 09 Aug 2025 18:42:37 -0400</pubDate>
      <guid>http://localhost:1313/posts/first-post/</guid>
      <description>&lt;p&gt;Welcome to my first blog post! I decided to build my portfolio site using Hugo and document the process.&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-hugo&#34;&gt;Why Hugo?&lt;/h2&gt;&#xA;&lt;p&gt;After exploring various static site generators, I chose Hugo for several reasons:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Speed&lt;/strong&gt; - Hugo builds sites incredibly fast&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Flexibility&lt;/strong&gt; - Complete control over layouts and styling&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Markdown&lt;/strong&gt; - Write content in markdown with frontmatter&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;No dependencies&lt;/strong&gt; - Single binary, no complex toolchain&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;the-emacs-gnu-aesthetic&#34;&gt;The Emacs GNU Aesthetic&lt;/h2&gt;&#xA;&lt;p&gt;I wanted my site to have that classic Emacs/GNU terminal vibe - clean, functional, and reminiscent of the tools I use daily for coding. The dark header, monospace fonts, and terminal-inspired color scheme create that perfect developer aesthetic.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AI Workflows, Ignore the Hype</title>
      <link>http://localhost:1313/blog/effective-ai-workflows/</link>
      <pubDate>Thu, 24 Jul 2025 10:30:00 -0400</pubDate>
      <guid>http://localhost:1313/blog/effective-ai-workflows/</guid>
      <description>&lt;h1 id=&#34;building-thread-safe-event-systems-in-go-a-k6-waitforresponse-case-study&#34;&gt;Building Thread-Safe Event Systems in Go: A k6 waitForResponse Case Study&lt;/h1&gt;&#xA;&lt;p&gt;Browser automation tools need to wait for specific network responsesâ€”but building this in a concurrent system is trickier than it looks. When testing web applications, you often need to wait for an API call to complete before proceeding with the next action. Without proper synchronization, tests become flaky and unreliable. Recently, I contributed the &lt;code&gt;waitForResponse&lt;/code&gt; API to k6&amp;rsquo;s browser module, architecting a thread-safe event system that handles hundreds of concurrent waiters without race conditions or resource leaks.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Building Thread-Safe Event Systems in Go: A k6 waitForResponse Case Study</title>
      <link>http://localhost:1313/blog/thread-safe-event-systems-in-go/</link>
      <pubDate>Thu, 24 Jul 2025 10:30:00 -0400</pubDate>
      <guid>http://localhost:1313/blog/thread-safe-event-systems-in-go/</guid>
      <description>&lt;h1 id=&#34;building-thread-safe-event-systems-in-go-a-k6-waitforresponse-case-study&#34;&gt;Building Thread-Safe Event Systems in Go: A k6 waitForResponse Case Study&lt;/h1&gt;&#xA;&lt;p&gt;Browser automation tools need to wait for specific network responsesâ€”but building this in a concurrent system is trickier than it looks. When testing web applications, you often need to wait for an API call to complete before proceeding with the next action. Without proper synchronization, tests become flaky and unreliable. Recently, I &lt;a href=&#34;https://github.com/grafana/k6/pull/5002&#34;&gt;contributed&lt;/a&gt; the &lt;code&gt;waitForResponse&lt;/code&gt; API to k6&amp;rsquo;s browser module, architecting a thread-safe event system that handles hundreds of concurrent waiters without race conditions or resource leaks.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SketchScript</title>
      <link>http://localhost:1313/projects/sketch-script/</link>
      <pubDate>Tue, 10 Jun 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/sketch-script/</guid>
      <description>&lt;h1 id=&#34;what&#34;&gt;What&lt;/h1&gt;&#xA;&lt;p&gt;SketchScript is a Domain-Specific Language (DSL) built in Haskell that serves as a code-driven alternative to visual mockup tools like Balsamiq or Figma wireframes. It&amp;rsquo;s designed for designers and developers who prefer to create UI mockups programmatically.&lt;/p&gt;&#xA;&lt;h1 id=&#34;why&#34;&gt;Why&lt;/h1&gt;&#xA;&lt;p&gt;With advancements in LLMs the jobs of designers and front-end developers moves closer and closer.&lt;/p&gt;&#xA;&lt;p&gt;With tools such as &lt;a href=&#34;https://www.figma.com/blog/introducing-figmas-dev-mode-mcp-server/&#34;&gt;Figma MCP&lt;/a&gt; coming around the block to be publicly available, designers must learn the basics of CSS layout tools (such as Flex, Grid, etc.), otherwise, the MCP server will be much less effective.&lt;/p&gt;</description>
    </item>
    <item>
      <title>cuNext</title>
      <link>http://localhost:1313/projects/carleton-revamped/</link>
      <pubDate>Sat, 01 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/carleton-revamped/</guid>
      <description>&lt;h1 id=&#34;what--why&#34;&gt;What &amp;amp; Why&lt;/h1&gt;&#xA;&lt;p&gt;cuNext was a project done at &lt;a href=&#34;https://2024.uottahack.ca/&#34;&gt;UOttaHack6&lt;/a&gt;, our team set out to update Carleton&amp;rsquo;s outdated and inaccessible UI. We also implemented a course scheduler that used backtracking algorithms to ensure that no course conflicts would occur.&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/cuNext-homepage.png&#34;&#xA;    alt=&#34;low coupling high cohesion&#34; width=&#34;100%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;Our homepage&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;design-system-at-work&#34;&gt;Design System at Work&lt;/h1&gt;&#xA;&lt;p&gt;See the entirety of our design system at work &lt;a href=&#34;https://www.figma.com/design/yCW89M8HS3Rq4oxdHOkDHF/%E2%9C%A8-cuNext?node-id=230-3182&amp;amp;t=uQpzRWAydJePrWI3-1&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>FE best practices</title>
      <link>http://localhost:1313/blog/fe-best-practices/</link>
      <pubDate>Sat, 28 Dec 2024 10:30:00 -0400</pubDate>
      <guid>http://localhost:1313/blog/fe-best-practices/</guid>
      <description>&lt;p&gt;&lt;strong&gt;DISCLAIMER:&lt;/strong&gt; As predicted, I disagree with a lot of what I wrote here earlier ðŸ˜…. With that being said, I still want to keep it up since there is still some useful information, and it&amp;rsquo;s always fun to see how far you&amp;rsquo;ve come.&lt;/p&gt;&#xA;&lt;p&gt;Scalable front-end code is an expansive topic; of course, there are topics I can&amp;rsquo;t cover here, such as effective testing, development philosophies, monorepos, and much more. This article focuses on practical strategies for scaling front-end code in terms of architecture, maintainability, and technologies. My primary goal is to leave you with an idea of WHAT you should be researching and looking into, not necessarily explaining the nitty-gritty of all topics. This guide is meant to be framework agnostic, and my advice here should be transferable to any framework.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CCSS Website</title>
      <link>http://localhost:1313/projects/ccss/</link>
      <pubDate>Mon, 01 Apr 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/ccss/</guid>
      <description></description>
    </item>
    <item>
      <title>Communiplant</title>
      <link>http://localhost:1313/projects/communiplant/</link>
      <pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/communiplant/</guid>
      <description></description>
    </item>
    <item>
      <title>Project Tech Careers</title>
      <link>http://localhost:1313/projects/ptc/</link>
      <pubDate>Fri, 01 Dec 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/ptc/</guid>
      <description></description>
    </item>
    <item>
      <title>MusicMania</title>
      <link>http://localhost:1313/projects/music-mania/</link>
      <pubDate>Wed, 01 Nov 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/music-mania/</guid>
      <description></description>
    </item>
    <item>
      <title>Chatathon</title>
      <link>http://localhost:1313/projects/chatathon/</link>
      <pubDate>Fri, 01 Sep 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/chatathon/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/posts/high-performance-systems/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/high-performance-systems/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/posts/scaling-video-diffusion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/scaling-video-diffusion/</guid>
      <description></description>
    </item>
  </channel>
</rss>
